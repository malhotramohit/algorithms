def partition(array,low,high):
	pivotIndex=low
	j=pivotIndex
	count=pivotIndex+1
	while(count<=high):
		if (array[count]>array[pivotIndex]) :
			j=j+1
			
			#start swapping without using third variable
			a = array[j]
			b = array[count]
			a = a + b
			b = a - b
			a = a - b
			array[j] = a
			array[count] = b
			#end swapping without using third variable
			
		count=count+1
	
	#start swapping without using third variable		
	a = array[j]
	b = array[pivotIndex]
	a = a + b
	b = a - b
	a = a - b
	array[j] = a
	array[pivotIndex] = b
	#end swapping without using third variable
	return j


def quicksort(arr,low,high) :
    if low<high :
        m=partition(arr,low,high)
        quicksort(arr,low,m-1)
        quicksort(arr,m+1,high)

def fractional_knapsack(value, weight, capacity):
    """Return maximum value of items and their fractional amounts.
 
    (max_value, fractions) is returned where max_value is the maximum value of
    items with total weight not more than capacity.
    fractions is a list where fractions[i] is the fraction that should be taken
    of item i, where 0 <= i < total number of items.
 
    value[i] is the value of item i and weight[i] is the weight of item i
    for 0 <= i < n where n is the number of items.
 
    capacity is the maximum weight.
    """
    # index = [0, 1, 2, ..., n - 1] for n items
    index = list(range(len(value)))
    # contains ratios of values to weight
    ratio = [v/w for v, w in zip(value, weight)]
    # index is sorted according to value-to-weight ratio in decreasing order
    quicksort(ratio,0,len(ratio)-1)
 
    max_value = 0
    fractions = [0]*len(value)
    for i in index:
        if weight[i] <= capacity:
            fractions[i] = 1
            max_value += value[i]
            capacity -= weight[i]
        else:
            fractions[i] = capacity/weight[i]
            max_value += value[i]*capacity/weight[i]
            break
 
    return max_value, fractions , ratio
 
 
n = int(input('Enter number of items: '))
value = input('Enter the values of the {} item(s) in order: '
              .format(n)).split()
value = [int(v) for v in value]
weight = input('Enter the positive weights of the {} item(s) in order: '
               .format(n)).split()
weight = [int(w) for w in weight]
capacity = int(input('Enter maximum weight: '))
 
max_value, fractions , ratio = fractional_knapsack(value, weight, capacity)
print('The value density of items:', ratio)
print('The maximum value of items that can be carried:', max_value)
print('The fractions in which the items should be taken:', fractions)
